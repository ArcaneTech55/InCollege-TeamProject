IDENTIFICATION DIVISION.
PROGRAM-ID. INCOLLEGE.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
       SELECT INPUT-FILE ASSIGN TO "InCollege-Input.txt"
           organization is line sequential.
       SELECT OUTPUT-FILE ASSIGN TO "InCollege-Output.txt"
           organization is line sequential.
       SELECT USER-ACCOUNT-FILE ASSIGN TO "USER-ACCOUNT.DAT"
           organization is sequential
           FILE STATUS IS WS-USER-FILE-STATUS.

DATA DIVISION.
FILE SECTION.
FD INPUT-FILE.
01 INPUT-RECORD PIC X(100).

FD OUTPUT-FILE.
01 OUTPUT-RECORD PIC X(100).

FD USER-ACCOUNT-FILE.
01 USER-ACCOUNT-REC.
       05 USER-NAME PIC X(100).
       05 USER-PASSWORD PIC X(100).

WORKING-STORAGE SECTION.
01 WS-FLAGS.
       05 WS-FILE-STATUS PIC X VALUE 'N'.
              88 WS-EOF-FLAG VALUE 'Y'.
              88 WS-NOT-EOF-FLAG VALUE 'N'.

       05 WS-LOGIN-FLAG PIC X.
           88 WS-LOGIN-SUCCESSFUL VALUE 'Y'.
           88 WS-LOGIN-FAILED VALUE 'N'.

       05 WS-VALIDATION-FLAG PIC X.
           88 WS-PASSWORD-IS-VALID VALUE 'Y'.
           88 WS-PASSWORD-IS-INVALID VALUE 'N'.

       05 WS-ACCOUNT-CREATED-FLAG PIC X.
           88 WS-ACCOUNT-CREATED VALUE 'Y'.
           88 WS-ACCOUNT-NOT-CREATED VALUE 'N'.

       05 WS-EXIT-STATUS PIC X VALUE 'N'.
              88 WS-USER-WANT-TO-EXIT VALUE 'Y'.

       05 WS-USER-FILE-STATUS PIC XX VALUE "00".
       05 WS-CUR-CHAR PIC X.


01 WS-COUNTERS.
       05 WS-USER-ACCOUNT-COUNT PIC 99 VALUE 0.
       05 I PIC 99.

01 WS-USER-ACCOUNT-TABLE.
       05 WS-USER OCCURS 5 TIMES INDEXED BY IDX.
           10 WS-USER-NAME PIC X(100).
           10 WS-USER-PASSWORD PIC X(100).

01 WS-INPUT-VARIABLES.
       05 WS-INPUT-CHOICE PIC X(1).
       05 WS-INPUT-USERNAME PIC X(100).
       05 WS-INPUT-PASSWORD PIC X(100).

01 WS-VALIDATION-FIELDS.
    05 WS-PASSWORD-LENGTH  PIC 999.
    05 WS-HAS-CAPITAL      PIC X.
    05 WS-HAS-DIGIT        PIC X.
    05 WS-HAS-SPECIAL      PIC X.
    05 WS-SPECIAL-CHARS    PIC X(10) VALUE "!@#$%^&*()".

01 DISPLAY-MSG PIC X(100) VALUE SPACES.
01 WS-WELCOME-MSG PIC X(25) VALUE 'Welcome to InCollege!'.
01 WS-PROMPT-LOGIN PIC X(28) VALUE 'Log In'.
01 WS-PROMPT-REGISTER PIC X(28) VALUE 'Create New Account'.
01 WS-PROMPT-CHOICE PIC X(20) VALUE 'Enter your choice:'.
01 WS-PROMPT-USERNAME PIC X(28) VALUE 'Please enter your username:'.
01 WS-PROMPT-PASSWORD PIC X(28) VALUE 'Please enter your password:'.
01 WS-SUCCESSFUL-LOGIN-MSG PIC X(50) VALUE 'You have successfully logged in.'.
01 WS-FIND-SOMEONE-MSG PIC X(28) VALUE 'Find someone you know'.
01 WS-LEARN-SKILL-MSG PIC X(28) VALUE 'Learn a new skill'.
01 WS-SEARCH-JOB-MSG PIC X(28) VALUE 'Search for a job'.
01 WS-INVALID-LOGIN-MSG PIC X(50) VALUE 'Incorrect username/password, please try again'.
01 WS-MAX-ACCOUNTS-MSG PIC X(100) VALUE 'All permitted accounts have been created, please come back later'.
01 WS-PASSWORD-TOO-SHORT PIC X(60) VALUE 'Password must be at least 8 characters long.'.
01 WS-PASSWORD-TOO-LONG PIC X(60) VALUE 'Password must be at most 12 characters long.'.
01 WS-PASSWORD-NO-CAPITAL PIC X(60) VALUE 'Password must contain at least one capital letter.'.
01 WS-PASSWORD-NO-DIGIT PIC X(60) VALUE 'Password must contain at least one digit.'.
01 WS-PASSWORD-NO-SPECIAL PIC X(60) VALUE 'Password must contain at least one special character.'.
01 WS-INVALID-CHOICE PIC X(60) VALUE 'Invalid choice. Please try again.'.
01 WS-DUPLICATE-USERNAME-MSG PIC X(100) VALUE 'This username already exists. Please try another.'.

PROCEDURE DIVISION.

0000-MAIN-LOGIC.
       PERFORM 1000-INITIALIZE-PROGRAM.
       PERFORM 2000-SHOW-MENU UNTIL WS-USER-WANT-TO-EXIT.
       PERFORM 9000-TERMINATE-PROGRAM.
       STOP RUN.

1000-INITIALIZE-PROGRAM.
       OPEN INPUT INPUT-FILE.
       OPEN OUTPUT OUTPUT-FILE.
       OPEN I-O USER-ACCOUNT-FILE.

       IF WS-USER-FILE-STATUS NOT = "00"
           PERFORM 1110-CREATE-USER-ACCOUNT-FILE
       END-IF.

       PERFORM 1100-LOAD-USER-ACCOUNT-TABLE.

1100-LOAD-USER-ACCOUNT-TABLE.
       MOVE 0 TO WS-USER-ACCOUNT-COUNT
       MOVE 'N' TO WS-FILE-STATUS
       PERFORM UNTIL WS-EOF-FLAG
           READ USER-ACCOUNT-FILE
               AT END
                   SET WS-EOF-FLAG TO TRUE
                NOT AT END
                   ADD 1 TO WS-USER-ACCOUNT-COUNT
                   MOVE USER-ACCOUNT-REC TO WS-USER(WS-USER-ACCOUNT-COUNT)
            END-READ
       END-PERFORM.

1110-CREATE-USER-ACCOUNT-FILE.
       OPEN OUTPUT USER-ACCOUNT-FILE
       IF WS-USER-FILE-STATUS NOT = "00"
           DISPLAY "Failed to create USER-ACCOUNT-FILE."
           STOP RUN
       END-IF
       CLOSE USER-ACCOUNT-FILE
       OPEN I-O USER-ACCOUNT-FILE.

2000-SHOW-MENU.
       MOVE WS-WELCOME-MSG TO DISPLAY-MSG.
       PERFORM 8000-DISPLAY-ROUTINE.
       MOVE WS-PROMPT-LOGIN TO DISPLAY-MSG.
       PERFORM 8000-DISPLAY-ROUTINE.
       MOVE WS-PROMPT-REGISTER TO DISPLAY-MSG.
       PERFORM 8000-DISPLAY-ROUTINE.
       MOVE WS-PROMPT-CHOICE TO DISPLAY-MSG.
       PERFORM 8000-DISPLAY-ROUTINE.
       READ INPUT-FILE INTO WS-INPUT-CHOICE
           AT END SET WS-USER-WANT-TO-EXIT TO TRUE.

       IF NOT WS-USER-WANT-TO-EXIT
           EVALUATE WS-INPUT-CHOICE
               WHEN "1"
                   PERFORM 3000-LOGIN-ROUTINE
               WHEN "2"
                   PERFORM 4000-CREATE-ACCOUNT-ROUTINE
               WHEN "3"
                   SET WS-USER-WANT-TO-EXIT TO TRUE
               WHEN OTHER
                   MOVE WS-INVALID-CHOICE TO DISPLAY-MSG
                   PERFORM 8000-DISPLAY-ROUTINE
           END-EVALUATE
        END-IF.


3000-LOGIN-ROUTINE.
       SET WS-LOGIN-FAILED TO TRUE.
       PERFORM UNTIL WS-LOGIN-SUCCESSFUL
           MOVE WS-PROMPT-USERNAME TO DISPLAY-MSG
           PERFORM 8000-DISPLAY-ROUTINE
           READ INPUT-FILE INTO WS-INPUT-USERNAME
               AT END SET WS-USER-WANT-TO-EXIT TO TRUE EXIT PERFORM
           END-READ

           MOVE WS-PROMPT-PASSWORD TO DISPLAY-MSG
           PERFORM 8000-DISPLAY-ROUTINE
           READ INPUT-FILE INTO WS-INPUT-PASSWORD
               AT END SET WS-USER-WANT-TO-EXIT TO TRUE EXIT PERFORM
           END-READ

           PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > WS-USER-ACCOUNT-COUNT
               IF FUNCTION TRIM(WS-USER-NAME(IDX)) =
                   FUNCTION TRIM(WS-INPUT-USERNAME) AND
                   FUNCTION TRIM(WS-USER-PASSWORD(IDX)) =
                   FUNCTION TRIM(WS-INPUT-PASSWORD)
                       SET WS-LOGIN-SUCCESSFUL TO TRUE
                       EXIT PERFORM
               END-IF
           END-PERFORM
           IF WS-LOGIN-SUCCESSFUL
               MOVE WS-SUCCESSFUL-LOGIN-MSG TO DISPLAY-MSG
               PERFORM 8000-DISPLAY-ROUTINE

               STRING "Welcome, "
                   FUNCTION TRIM(WS-INPUT-USERNAME)
                   DELIMITED BY SIZE
                   INTO DISPLAY-MSG
               PERFORM 8000-DISPLAY-ROUTINE

               PERFORM 5000-POST-LOGIN-MENU
               SET WS-USER-WANT-TO-EXIT TO TRUE
           ELSE
               MOVE WS-INVALID-LOGIN-MSG TO DISPLAY-MSG
               PERFORM 8000-DISPLAY-ROUTINE
               EXIT PERFORM *> Go back to main menu after one failed attempt
           END-IF
       END-PERFORM.

4000-CREATE-ACCOUNT-ROUTINE.
       IF WS-USER-ACCOUNT-COUNT >= 5
        MOVE WS-MAX-ACCOUNTS-MSG TO DISPLAY-MSG
        PERFORM 8000-DISPLAY-ROUTINE
        EXIT PARAGRAPH
       END-IF.

       SET WS-ACCOUNT-NOT-CREATED TO TRUE.

       MOVE WS-PROMPT-USERNAME TO DISPLAY-MSG
       PERFORM 8000-DISPLAY-ROUTINE
       READ INPUT-FILE INTO WS-INPUT-USERNAME
        AT END SET WS-USER-WANT-TO-EXIT TO TRUE EXIT PARAGRAPH
       END-READ

       *> Check for duplicate username
       PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > WS-USER-ACCOUNT-COUNT
           IF FUNCTION TRIM(WS-USER-NAME(IDX)) =
              FUNCTION TRIM(WS-INPUT-USERNAME)
               MOVE WS-DUPLICATE-USERNAME-MSG TO DISPLAY-MSG
               PERFORM 8000-DISPLAY-ROUTINE
               EXIT PARAGRAPH
           END-IF
       END-PERFORM
       *> DISPLAY WS-INPUT-USERNAME
       *> MOVE WS-INPUT-USERNAME TO OUTPUT-RECORD
       *> WRITE OUTPUT-RECORD.

       MOVE WS-PROMPT-PASSWORD TO DISPLAY-MSG
       PERFORM 8000-DISPLAY-ROUTINE
       READ INPUT-FILE INTO WS-INPUT-PASSWORD
        AT END SET WS-USER-WANT-TO-EXIT TO TRUE EXIT PARAGRAPH
       END-READ
       *> DISPLAY WS-INPUT-PASSWORD
       *> MOVE WS-INPUT-PASSWORD TO OUTPUT-RECORD
       *> WRITE OUTPUT-RECORD.

       PERFORM 4100-VALIDATE-PASSWORD.

       IF WS-PASSWORD-IS-VALID
        ADD 1 TO WS-USER-ACCOUNT-COUNT
        MOVE WS-INPUT-USERNAME TO WS-USER-NAME(WS-USER-ACCOUNT-COUNT)
        MOVE WS-INPUT-PASSWORD TO WS-USER-PASSWORD(WS-USER-ACCOUNT-COUNT)

        OPEN EXTEND USER-ACCOUNT-FILE
        MOVE WS-USER(WS-USER-ACCOUNT-COUNT) TO USER-ACCOUNT-REC
        WRITE USER-ACCOUNT-REC
        CLOSE USER-ACCOUNT-FILE

        MOVE "Account created successfully!" TO DISPLAY-MSG
        PERFORM 8000-DISPLAY-ROUTINE
        SET WS-ACCOUNT-CREATED TO TRUE
       ELSE
        MOVE "Account creation failed, please try again."
            TO DISPLAY-MSG
        PERFORM 8000-DISPLAY-ROUTINE
       END-IF.


4100-VALIDATE-PASSWORD.
       SET WS-PASSWORD-IS-VALID TO TRUE
       COMPUTE WS-PASSWORD-LENGTH = FUNCTION LENGTH(FUNCTION TRIM(WS-INPUT-PASSWORD))

       *> check if password length is fewer than 8
       IF WS-PASSWORD-LENGTH < 8
        MOVE WS-PASSWORD-TOO-SHORT TO DISPLAY-MSG
        PERFORM 8000-DISPLAY-ROUTINE
        SET WS-PASSWORD-IS-INVALID TO TRUE
        EXIT PARAGRAPH
       END-IF.

       *> check if password length is greater than 12
       IF WS-PASSWORD-LENGTH > 12
        MOVE WS-PASSWORD-TOO-LONG TO DISPLAY-MSG
        PERFORM 8000-DISPLAY-ROUTINE
        SET WS-PASSWORD-IS-INVALID TO TRUE
        EXIT PARAGRAPH
       END-IF.

       MOVE 'N' TO WS-HAS-CAPITAL WS-HAS-DIGIT WS-HAS-SPECIAL.

       PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > WS-PASSWORD-LENGTH
           MOVE WS-INPUT-PASSWORD(IDX:1) TO WS-CUR-CHAR

           IF WS-CUR-CHAR >= 'A' AND WS-CUR-CHAR <= 'Z'
               MOVE 'Y' TO WS-HAS-CAPITAL
           END-IF

           IF WS-CUR-CHAR >= '0' AND WS-CUR-CHAR <= '9'
               MOVE 'Y' TO WS-HAS-DIGIT
           END-IF

           IF WS-CUR-CHAR = "!" OR
              WS-CUR-CHAR = "@" OR
              WS-CUR-CHAR = "#" OR
              WS-CUR-CHAR = "$" OR
              WS-CUR-CHAR = "%" OR
              WS-CUR-CHAR = "^" OR
              WS-CUR-CHAR = "&" OR
              WS-CUR-CHAR = "*" OR
              WS-CUR-CHAR = "(" OR
              WS-CUR-CHAR = ")"
               MOVE "Y" TO WS-HAS-SPECIAL
           END-IF
       END-PERFORM

       IF WS-HAS-CAPITAL = 'N'
        MOVE WS-PASSWORD-NO-CAPITAL TO DISPLAY-MSG
        PERFORM 8000-DISPLAY-ROUTINE
        SET WS-PASSWORD-IS-INVALID TO TRUE
       END-IF.
       IF WS-HAS-DIGIT = 'N'
        MOVE WS-PASSWORD-NO-DIGIT TO DISPLAY-MSG
        PERFORM 8000-DISPLAY-ROUTINE
        SET WS-PASSWORD-IS-INVALID TO TRUE
       END-IF.
       IF WS-HAS-SPECIAL = 'N'
        MOVE WS-PASSWORD-NO-SPECIAL TO DISPLAY-MSG
        PERFORM 8000-DISPLAY-ROUTINE
        SET WS-PASSWORD-IS-INVALID TO TRUE
       END-IF.

5000-POST-LOGIN-MENU.
*>----------------------------------------------------------------
*> THE NEXT DEVELOPER CAN IMPLEMENT THE POST-LOGIN MENU LOGIC
*> HERE BASED ON THE REQUIREMENTS DOCUMENT. THIS SECTION SHOULD
*> DISPLAY OPTIONS FOR:
*> - Find someone you know
*> - Learn a new skill
*> - Search for a job
*> AND HANDLE THE USER'S CHOICE ACCORDINGLY.
*>----------------------------------------------------------------
    MOVE "--- POST-LOGIN MENU (UNDER CONSTRUCTION) ---"
        TO DISPLAY-MSG.
    PERFORM 8000-DISPLAY-ROUTINE.
8000-DISPLAY-ROUTINE.
       DISPLAY DISPLAY-MSG.
       MOVE DISPLAY-MSG TO OUTPUT-RECORD.
       WRITE OUTPUT-RECORD.
       MOVE SPACES TO DISPLAY-MSG.

9000-TERMINATE-PROGRAM.
    CLOSE INPUT-FILE
    CLOSE OUTPUT-FILE
    CLOSE USER-ACCOUNT-FILE
    EXIT.
